generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model addresses {
  id          Int       @id @default(autoincrement())
  user_id     Int?
  street      String    @db.VarChar(255)
  city        String    @db.VarChar(255)
  state       String    @db.VarChar(255)
  postal_code String    @db.VarChar(255)
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  users       users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  orders      orders[]
}

model cart_items {
  id         Int       @id @default(autoincrement())
  cart_id    Int?
  product_id Int?
  quantity   Int
  created_at DateTime? @default(now()) @db.Timestamp(6)
  carts      carts?    @relation(fields: [cart_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  products   products? @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model carts {
  id         Int          @id @default(autoincrement())
  user_id    Int?
  created_at DateTime?    @default(now()) @db.Timestamp(6)
  cart_items cart_items[]
  users      users?       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model categories {
  id         Int        @id @default(autoincrement())
  name       String     @db.VarChar(255)
  created_at DateTime?  @default(now()) @db.Timestamp(6)
  products   products[]
}

model colors {
  id         Int        @id @default(autoincrement())
  name       String     @db.VarChar(255)
  created_at DateTime?  @default(now()) @db.Timestamp(6)
  products   products[]
}

model order_items {
  id         Int       @id @default(autoincrement())
  order_id   Int?
  product_id Int?
  quantity   Int
  created_at DateTime? @default(now()) @db.Timestamp(6)
  orders     orders?   @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_order_item_order")
  products   products? @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_order_item_product")
}

model orders {
  id             Int           @id @default(autoincrement())
  user_id        Int?
  address_id     Int?
  payment_method String        @db.VarChar(255)
  total_amount   Int
  created_at     DateTime?     @default(now()) @db.Timestamp(6)
  order_items    order_items[]
  addresses      addresses?    @relation(fields: [address_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_order_address")
  users          users?        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_order_user")
}

model products {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(255)
  price       Int
  stock       Int
  color_id    Int?
  size_id     Int?
  model_id    Int?
  category_id Int?
  image_url   String?       @db.VarChar(255)
  created_at  DateTime?     @default(now()) @db.Timestamp(6)
  cart_items  cart_items[]
  order_items order_items[]
  categories  categories?   @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_product_category")
  colors      colors?       @relation(fields: [color_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_product_color")
  sizes       sizes?        @relation(fields: [size_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_product_size")
}

model sizes {
  id         Int        @id @default(autoincrement())
  name       String     @db.VarChar(255)
  created_at DateTime?  @default(now()) @db.Timestamp(6)
  products   products[]
}

model users {
  id         Int         @id @default(autoincrement())
  email      String      @unique @db.VarChar(255)
  name       String      @db.VarChar(255)
  password   String      @db.VarChar(255)
  created_at DateTime?   @default(now()) @db.Timestamp(6)
  session    sessions[]
  addresses  addresses[]
  carts      carts[]
  orders     orders[]
  usersInfo  usersInfo[]
}

model usersInfo {
  id           Int       @id @default(autoincrement())
  cpf          String    @unique @db.VarChar(11)
  image_url    String?   @db.VarChar(255)
  document_url String?   @db.VarChar(255)
  userId       Int       @unique
  user         users     @relation(fields: [userId], references: [id], onDelete: Cascade)
  created_at   DateTime? @default(now()) @db.Timestamp(6)
}

model sessions {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}
