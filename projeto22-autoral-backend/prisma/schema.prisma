generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model addresses {
  id             Int              @id @default(autoincrement())
  street         String           @db.VarChar(50)
  city           String           @db.VarChar(50)
  state          String           @db.VarChar(50)
  postal_code    String           @db.VarChar(8)
  orders         orders[]
  user_addresses user_addresses[]
}

model authentication {
  id               Int                @id @default(autoincrement())
  email            String             @unique
  password         String
  created_at       DateTime?          @default(now()) @db.Timestamp(6)
  sessions         sessions[]
  user_information user_information[]
}

model cart {
  id               Int              @id @default(autoincrement())
  user_id          Int
  user_information user_information @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_cart_user_id")
  cart_item        cart_item[]
}

model cart_item {
  id                 Int              @id @default(autoincrement())
  cart_id            Int
  product_variant_id Int
  quantity           Int?
  cart               cart             @relation(fields: [cart_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_cart_item_cart_id")
  product_variants   product_variants @relation(fields: [product_variant_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_cart_item_product_variant_id")
}

model categories {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  product_variants product_variants[]
}

model colors {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(30)
  product_variants product_variants[]
}

model order_items {
  id                 Int              @id @default(autoincrement())
  order_id           Int
  product_variant_id Int
  quantity           Int?
  price              Int?
  orders             orders           @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_order_items_order_id")
  product_variants   product_variants @relation(fields: [product_variant_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_order_items_product_variant_id")
}

model orders {
  id               Int              @id @default(autoincrement())
  user_id          Int
  address_id       Int
  created_at       DateTime?        @db.Date
  total            Int?
  order_items      order_items[]
  addresses        addresses        @relation(fields: [address_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_orders_address_id")
  user_information user_information @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_orders_user_id")
}

model product_variants {
  id          Int           @id @default(autoincrement())
  product_id  Int
  color_id    Int?
  size_id     Int?
  category_id Int?
  stock       Int?
  image_url   String
  cart_item   cart_item[]
  order_items order_items[]
  categories  categories?   @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_product_variants_category_id")
  colors      colors?       @relation(fields: [color_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_product_variants_color_id")
  products    products      @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_product_variants_product_id")
  sizes       sizes?        @relation(fields: [size_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_product_variants_size_id")
}

model products {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(100)
  price            Int
  product_variants product_variants[]
}

model sessions {
  id             Int            @id @default(autoincrement())
  auth_id        Int
  token          String
  created_at     DateTime?      @db.Timestamp(6)
  updated_at     DateTime?      @db.Timestamp(6)
  authentication authentication @relation(fields: [auth_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_sessions_auth_id")
}

model sizes {
  id               Int                @id @default(autoincrement())
  name             String             @unique @db.VarChar(3)
  product_variants product_variants[]
}

model user_addresses {
  id               Int              @id @default(autoincrement())
  user_id          Int
  address_id       Int
  addresses        addresses        @relation(fields: [address_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_addresses_address_id")
  user_information user_information @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_addresses_user_id")
}

model user_information {
  id             Int              @id @default(autoincrement())
  auth_id        Int?
  image_url      String?
  cpf            String?          @db.VarChar(11)
  name           String           @db.VarChar(60)
  cart           cart[]
  orders         orders[]
  user_addresses user_addresses[]
  authentication authentication?  @relation(fields: [auth_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_information_auth_id")
}
